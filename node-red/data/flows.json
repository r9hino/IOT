[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Data Capture",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c19fc8a18bff1dd0",
        "type": "tab",
        "label": "Notifications",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "80b99021.9a4",
        "type": "node-red-contrib-whatsapp-cmb-account",
        "name": "PI"
    },
    {
        "id": "b23d8359c5c9ebfb",
        "type": "postgreSQLConfig",
        "name": "Timescale",
        "host": "timescale",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "POSTGRES_USERNAME",
        "userFieldType": "env",
        "password": "POSTGRES_PASSWORD",
        "passwordFieldType": "env"
    },
    {
        "id": "22d655552657cf36",
        "type": "soap-config-plus",
        "wsdl": "https://snia.mop.gob.cl/controlextraccion/wsdl/datosExtraccion/SendDataExtraccionService",
        "auth": "0",
        "user": "",
        "pass": "",
        "key": "",
        "cert": "",
        "token": ""
    },
    {
        "id": "cc3681ed0c802413",
        "type": "mqtt-broker",
        "name": "MQTT-Server",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fbd6fb10ebb4e77f",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Toggler",
        "func": "let toggle = context.get('toggle') || 0;\n\ncontext.set(\"toggle\", !toggle);\n\nmsg.payload = !toggle;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 380,
        "wires": [
            [
                "801304a26341c444"
            ]
        ]
    },
    {
        "id": "801304a26341c444",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Toggler",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 380,
        "wires": []
    },
    {
        "id": "603ffd2ea0bcbf2d",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 250,
        "y": 380,
        "wires": [
            [
                "fbd6fb10ebb4e77f"
            ]
        ]
    },
    {
        "id": "2afaa69856572546",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "Listen-Python-I2C-Data",
        "topic": "sensor/i2c",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc3681ed0c802413",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 220,
        "wires": [
            [
                "aca9796f6ef0f4e6"
            ]
        ]
    },
    {
        "id": "893673ea93e0e06f",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 11",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 220,
        "wires": []
    },
    {
        "id": "01851337b45d1169",
        "type": "aedes broker",
        "z": "f6f2187d.f17ca8",
        "name": "MQTT-Broker-Server",
        "mqtt_port": 1883,
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "6ef486e09cea5695"
            ],
            [
                "d25026e7f7ab4768"
            ]
        ]
    },
    {
        "id": "6ef486e09cea5695",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Broker Status Events",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 60,
        "wires": []
    },
    {
        "id": "d25026e7f7ab4768",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Broker Publish Event",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 100,
        "wires": []
    },
    {
        "id": "5646bff859abac17",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "Request-Python-I2C-Data",
        "topic": "sensor/request",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc3681ed0c802413",
        "x": 370,
        "y": 160,
        "wires": []
    },
    {
        "id": "e87e3a1be91d7a3d",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "5646bff859abac17"
            ]
        ]
    },
    {
        "id": "aca9796f6ef0f4e6",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Calculo Caudal",
        "func": "let x = msg.payload.voltage;\n\n// Convertir voltaje a profundidad\n/* \n    V = 4mA * 150ohm = 0.6V\n    V = 20mA * 150ohm = 3.0V\n    \n    0.6V -> 0m\n      x  -> h\n    3.0V -> h_max (max profundidad) m\n    (h_max - 0)/(3 - 0.6) = (h - 0)/(x - 0.6)\n    h = h_max*(x - 0.6)/2.4\n*/\nconst h_max = 2;      // Profundidad maxima detectada por sensor m\nconst w = 2;      // Ancho canal m\nconst S = 0.0043;   // Pendiente canal m\nconst n = 0.01;     // Rugosidad pared canal\n\n// Calcular profundidad\nlet h = h_max*(x - 0.6)/2.4;\nif(h < 0) h = 0;\n\n// Calcular Area\nlet A = w*h;\n\n// Velocidad promedio agua\nlet R = A/(2*h+w);\nlet V = R**(2/3)*S**(1/2)/n;\n\n// Caudal canal\nlet Q = A*V;\n\nmsg.payload = {voltaje: x, profundidad: h, velocidad: V, caudal: Q};\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 220,
        "wires": [
            [
                "893673ea93e0e06f",
                "cc9d55b43af50ae2"
            ]
        ]
    },
    {
        "id": "cc9d55b43af50ae2",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "Insertar registro",
        "query": "INSERT INTO registros (fecha_hora, id_obra, profundidad, velocidad, caudal)\n    VALUES (NOW(), 1, {{{ msg.payload.profundidad }}}, {{{ msg.payload.velocidad }}},\n    {{{ msg.payload.caudal }}});",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 600,
        "y": 280,
        "wires": [
            []
        ]
    },
    {
        "id": "b234123a.c95f5",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 40,
        "wires": []
    },
    {
        "id": "09c5185b84028af8",
        "type": "inject",
        "z": "c19fc8a18bff1dd0",
        "name": "Email test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Test subject",
        "payload": "This is a test",
        "payloadType": "str",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "ab24375cb61c90bf"
            ]
        ]
    },
    {
        "id": "ab24375cb61c90bf",
        "type": "e-mail",
        "z": "c19fc8a18bff1dd0",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "philippe.ilharreguy@gmail.com",
        "dname": "PI email",
        "x": 260,
        "y": 100,
        "wires": []
    },
    {
        "id": "9ae215cb4e377e36",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 700,
        "y": 160,
        "wires": []
    },
    {
        "id": "68926513297359aa",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "GetSOAP",
        "func": "\nlet newmsg = {\n    server: \"https://snia.mop.gob.cl/controlextraccion/wsdl/datosExtraccion/SendDataExtraccionService\",\n    options: {\n        overrideRootElement: {\n            \"namespace\": \"get\",\n            \"xmlnsAttributes\": [{\n                \"name\": \"xmlns:get\",\n                \"value\": \"http://www.mop.cl/controlextraccion/xsd/datosExtraccion/GetDataExtraccionRequest\"\n            }]\n        }\n    },\n    headers: {},\n    payload: {\n            codigoDeLaObra: \"OB-1402-497\",\n            numeroComprobante: \"dc921232e0efcac1\"\n    }\n};\n\nreturn newmsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 160,
        "wires": [
            [
                "dd90b7fa6e9340fa"
            ]
        ]
    },
    {
        "id": "67ab826ef7fe7aae",
        "type": "inject",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "68926513297359aa"
            ]
        ]
    },
    {
        "id": "dd90b7fa6e9340fa",
        "type": "soap request plus",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "topic": "",
        "wsdl": "22d655552657cf36",
        "method": "getDataExtraccionOp",
        "x": 510,
        "y": 160,
        "wires": [
            [
                "9ae215cb4e377e36"
            ],
            [
                "9ae215cb4e377e36"
            ]
        ]
    },
    {
        "id": "89a9d9dc6ab10b5c",
        "type": "http request",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://snia.mop.gob.cl/controlextraccion/datosExtraccion/SendDataExtraccionService",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 390,
        "y": 280,
        "wires": [
            [
                "cb19acad88ea8ad8",
                "ed77c53d5e36c072"
            ]
        ]
    },
    {
        "id": "b5bf5f268a9ed3a7",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "PutSOAP",
        "func": "\nmsg.headers = {\n    'Content-Type': 'text/xml;charset=UTF-8',\n    'SOAPAction': 'http://www.mop.cl/controlextraccion/wsdl/datosExtraccion/authSendDataExtraccionOp'\n};\n\nmsg.payload = \n`<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:aut=\"http://www.mop.cl/controlextraccion/xsd/datosExtraccion/AuthSendDataExtraccionRequest\">\n   <soapenv:Header>\n      <aut:authSendDataExtraccionTraza>\n         <aut:codigoDeLaObra>OB-1402-497</aut:codigoDeLaObra>\n         <aut:timeStampOrigen>2024-09-02T14:01:00Z</aut:timeStampOrigen>\n      </aut:authSendDataExtraccionTraza>\n   </soapenv:Header>\n   <soapenv:Body>\n      <aut:authSendDataExtraccionRequest>\n         <aut:authDataUsuario>\n            <aut:idUsuario>\n               <aut:rut>16338539-2</aut:rut>\n            </aut:idUsuario>\n            <aut:password>MkMKg69nO2</aut:password>\n         </aut:authDataUsuario>\n         <!--You have a CHOICE of the next 2 items at this level-->\n         <!--Optional:-->\n         <aut:authDataExtraccionSuperficial>\n            <aut:fechaMedicion>02-09-2024</aut:fechaMedicion>\n            <aut:horaMedicion>14:01:00</aut:horaMedicion>\n            <aut:caudal>10</aut:caudal>\n            <aut:alturaLimnimetrica>1</aut:alturaLimnimetrica>\n         </aut:authDataExtraccionSuperficial>\n      </aut:authSendDataExtraccionRequest>\n   </soapenv:Body>\n</soapenv:Envelope>`;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 280,
        "wires": [
            [
                "89a9d9dc6ab10b5c"
            ]
        ]
    },
    {
        "id": "ed77c53d5e36c072",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "debug 6",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 620,
        "y": 300,
        "wires": []
    },
    {
        "id": "cb19acad88ea8ad8",
        "type": "xml",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 230,
        "y": 340,
        "wires": [
            [
                "5ad961939d054b56"
            ]
        ]
    },
    {
        "id": "5ad961939d054b56",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "ExtractResponse",
        "func": "let httpStatusCode;\nlet data;\nlet comprobante;\nlet status;\nlet newmsg = {};\n\nhttpStatusCode = msg.statusCode;\ndata = msg.payload[\"soapenv:Envelope\"][\"soapenv:Body\"][0][\"authSendDataExtraccionResponse\"][0];\ncomprobante = data[\"numeroComprobante\"][0];\nstatus = data[\"status\"][0];\n\nnewmsg[\"httpStatusCode\"] = httpStatusCode;\nnewmsg[\"comprobante\"] = comprobante;\nnewmsg[\"codigo\"] = status[\"Code\"][0];\nnewmsg[\"descripcion\"] = status[\"Description\"][0];\nreturn newmsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 340,
        "wires": [
            [
                "ed77c53d5e36c072"
            ]
        ]
    },
    {
        "id": "fcb51e4af2e157b9",
        "type": "node-red-contrib-whatsapp-cmb-send-message",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "credtype": "account",
        "account": "80b99021.9a4",
        "text": "alert_message",
        "phonenumbervalue": "",
        "apikeyvalue": "",
        "apikeyinputtypemessage": "msg",
        "phonenumberinputtypemessage": "msg",
        "inputtypemessage": "msg",
        "rejectssl": true,
        "x": 220,
        "y": 40,
        "wires": [
            [
                "b234123a.c95f5"
            ]
        ]
    },
    {
        "id": "157118029ffcacde",
        "type": "inject",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 420,
        "wires": [
            [
                "923a6d21aa518c7a"
            ]
        ]
    },
    {
        "id": "923a6d21aa518c7a",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Query Flujo L/min - Volumen m3",
        "query": "WITH \nsensor1 AS (\n    SELECT time,\n    measurement \n    FROM sensor_log \n    WHERE sensor_id = 1 \n    ORDER BY time DESC \n    LIMIT 1\n),\nsensor2 AS (\n    SELECT measurement \n    FROM sensor_log \n    WHERE sensor_id = 2 \n    ORDER BY time DESC \n    LIMIT 1\n)\nSELECT\n\tsensor1.time as timestamp,\n\tTO_CHAR(sensor1.time, 'DD-MM-YYYY') AS date,\n    TO_CHAR(sensor1.time, 'HH24:MI:SS') AS time,\n    sensor1.measurement AS \"flujo_L_min\", \n    sensor2.measurement AS volumen_m3\nFROM sensor1, sensor2",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 330,
        "y": 420,
        "wires": [
            [
                "c7ccf197ba79aba1"
            ]
        ]
    },
    {
        "id": "244baeffbb9733b7",
        "type": "inject",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 280,
        "wires": [
            [
                "b5bf5f268a9ed3a7"
            ]
        ]
    },
    {
        "id": "aa1abbf650e2eec6",
        "type": "http request",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://snia.mop.gob.cl/controlextraccion/datosExtraccion/SendDataExtraccionService",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 420,
        "wires": [
            [
                "a06a4d89b48eebd0"
            ]
        ]
    },
    {
        "id": "c7ccf197ba79aba1",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "PutSOAP",
        "func": "const timestamp = msg.payload[0].timestamp.toISOString().slice(0, 19) + 'Z'; //localDateTimeString = localDateTimeString.timestamp.toISOString().split('.')[0] + 'Z';\nconst options = { timeZone: \"America/Santiago\", hour12: false };\nconst date = msg.payload[0].timestamp.toLocaleDateString(\"en-GB\", options).replaceAll(\"/\", \"-\");\nconst time = msg.payload[0].timestamp.toLocaleTimeString(\"en-GB\", options);\nconst volumen_m3 = msg.payload[0].volumen_m3;\nconst flujo_L_s = (msg.payload[0].flujo_L_min/60).toFixed(2);\n\nmsg.headers = {\n    'Content-Type': 'text/xml;charset=UTF-8',\n    'SOAPAction': 'http://www.mop.cl/controlextraccion/wsdl/datosExtraccion/authSendDataExtraccionOp',\n    'Host': 'snia.mop.gob.cl'\n};\n\nmsg.payload = \n`<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:aut=\"http://www.mop.cl/controlextraccion/xsd/datosExtraccion/AuthSendDataExtraccionRequest\">\n   <soapenv:Header>\n      <aut:authSendDataExtraccionTraza>\n         <aut:codigoDeLaObra>OB-1402-497</aut:codigoDeLaObra>\n         <aut:timeStampOrigen>${timestamp}</aut:timeStampOrigen>\n      </aut:authSendDataExtraccionTraza>\n   </soapenv:Header>\n   <soapenv:Body>\n      <aut:authSendDataExtraccionRequest>\n         <aut:authDataUsuario>\n            <aut:idUsuario>\n               <aut:rut>16338539-2</aut:rut>\n            </aut:idUsuario>\n            <aut:password>MkMKg69nO2</aut:password>\n         </aut:authDataUsuario>\n         <aut:authDataExtraccionSuperficial>\n            <aut:fechaMedicion>${date}</aut:fechaMedicion>\n            <aut:horaMedicion>${time}</aut:horaMedicion>\n            <aut:caudal>${flujo_L_s}</aut:caudal>\n            <aut:nivelFreaticoDelPozo>1.0</aut:nivelFreaticoDelPozo>\n         </aut:authDataExtraccionSuperficial>\n      </aut:authSendDataExtraccionRequest>\n   </soapenv:Body>\n</soapenv:Envelope>`;\n\ndelete msg.pgsql;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 420,
        "wires": [
            [
                "aa1abbf650e2eec6"
            ]
        ]
    },
    {
        "id": "e642b7fafc2293e6",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "debug 8",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 720,
        "y": 480,
        "wires": []
    },
    {
        "id": "a06a4d89b48eebd0",
        "type": "xml",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 350,
        "y": 480,
        "wires": [
            [
                "aa3a6b3239d373ef"
            ]
        ]
    },
    {
        "id": "aa3a6b3239d373ef",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "ExtractResponse",
        "func": "let newmsg = {};\n\nnewmsg = msg.payload[\"soapenv:Envelope\"][\"soapenv:Body\"][0][\"authSendDataExtraccionResponse\"][0];\nnewmsg = newmsg[\"status\"][0];\n\nreturn newmsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 480,
        "wires": [
            [
                "e642b7fafc2293e6"
            ]
        ]
    },
    {
        "id": "6b9dcce09517d5be",
        "type": "comment",
        "z": "c19fc8a18bff1dd0",
        "name": "Descripcion logica",
        "info": "Cada x minutos enviar registro mas antiguo no enviado\n\nQuedan registros por mandar?\nSi: intenta enviar\nNo: no se intenta enviar\n",
        "x": 110,
        "y": 220,
        "wires": []
    }
]