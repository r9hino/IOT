[
    {
        "id": "f6f2187d.f17ca8",
        "type": "tab",
        "label": "Data Capture",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c19fc8a18bff1dd0",
        "type": "tab",
        "label": "Data Publication",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "80b99021.9a4",
        "type": "node-red-contrib-whatsapp-cmb-account",
        "name": "PI"
    },
    {
        "id": "b23d8359c5c9ebfb",
        "type": "postgreSQLConfig",
        "name": "Timescale",
        "host": "timescale",
        "hostFieldType": "str",
        "port": "5432",
        "portFieldType": "num",
        "database": "postgres",
        "databaseFieldType": "str",
        "ssl": "false",
        "sslFieldType": "bool",
        "applicationName": "",
        "applicationNameType": "str",
        "max": "10",
        "maxFieldType": "num",
        "idle": "1000",
        "idleFieldType": "num",
        "connectionTimeout": "10000",
        "connectionTimeoutFieldType": "num",
        "user": "POSTGRES_USERNAME",
        "userFieldType": "env",
        "password": "POSTGRES_PASSWORD",
        "passwordFieldType": "env"
    },
    {
        "id": "22d655552657cf36",
        "type": "soap-config-plus",
        "wsdl": "https://snia.mop.gob.cl/controlextraccion/wsdl/datosExtraccion/SendDataExtraccionService",
        "auth": "0",
        "user": "",
        "pass": "",
        "key": "",
        "cert": "",
        "token": ""
    },
    {
        "id": "cc3681ed0c802413",
        "type": "mqtt-broker",
        "name": "MQTT-Server",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "fbd6fb10ebb4e77f",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Toggler",
        "func": "let toggle = context.get('toggle') || 0;\n\ncontext.set(\"toggle\", !toggle);\n\nmsg.payload = !toggle;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 60,
        "wires": [
            [
                "801304a26341c444"
            ]
        ]
    },
    {
        "id": "801304a26341c444",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Toggler",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 880,
        "y": 60,
        "wires": []
    },
    {
        "id": "603ffd2ea0bcbf2d",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 590,
        "y": 60,
        "wires": [
            [
                "fbd6fb10ebb4e77f"
            ]
        ]
    },
    {
        "id": "2afaa69856572546",
        "type": "mqtt in",
        "z": "f6f2187d.f17ca8",
        "name": "Listen-Python-I2C-Data",
        "topic": "sensor/i2c",
        "qos": "2",
        "datatype": "auto-detect",
        "broker": "cc3681ed0c802413",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 120,
        "y": 300,
        "wires": [
            [
                "3eb7a816c89b1833"
            ]
        ]
    },
    {
        "id": "893673ea93e0e06f",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "debug 1",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 320,
        "wires": []
    },
    {
        "id": "01851337b45d1169",
        "type": "aedes broker",
        "z": "f6f2187d.f17ca8",
        "name": "MQTT-Broker-Server",
        "mqtt_port": 1883,
        "mqtt_ws_bind": "port",
        "mqtt_ws_port": "",
        "mqtt_ws_path": "",
        "cert": "",
        "key": "",
        "certname": "",
        "keyname": "",
        "persistence_bind": "memory",
        "dburl": "",
        "usetls": false,
        "x": 120,
        "y": 80,
        "wires": [
            [
                "6ef486e09cea5695"
            ],
            [
                "d25026e7f7ab4768"
            ]
        ]
    },
    {
        "id": "6ef486e09cea5695",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Broker Status Events",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 60,
        "wires": []
    },
    {
        "id": "d25026e7f7ab4768",
        "type": "debug",
        "z": "f6f2187d.f17ca8",
        "name": "Broker Publish Event",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 100,
        "wires": []
    },
    {
        "id": "5646bff859abac17",
        "type": "mqtt out",
        "z": "f6f2187d.f17ca8",
        "name": "Request-Python-I2C-Data",
        "topic": "sensor/request",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "cc3681ed0c802413",
        "x": 370,
        "y": 200,
        "wires": []
    },
    {
        "id": "e87e3a1be91d7a3d",
        "type": "inject",
        "z": "f6f2187d.f17ca8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "300",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "5646bff859abac17"
            ]
        ]
    },
    {
        "id": "7e5414a1f36aa5d0",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Solcitud a script de Python via MQTT para obtener datos de sensores",
        "info": "",
        "x": 270,
        "y": 160,
        "wires": []
    },
    {
        "id": "8d9d8c4c386abdd8",
        "type": "comment",
        "z": "f6f2187d.f17ca8",
        "name": "Respuesta script Python via MQTT con dato de sensores",
        "info": "",
        "x": 230,
        "y": 260,
        "wires": []
    },
    {
        "id": "3eb7a816c89b1833",
        "type": "function",
        "z": "f6f2187d.f17ca8",
        "name": "Calculo Caudal",
        "func": "/* \nRecibe señales de sensores de 4-20mA convertidas a\nvoltaje por medio de tarjeta.\nAI0 deberia ser señal potencia Rhom, AI1 señal de Pehui.\n*/\n\nlet AI0 = {\n    info: \"Señal 4-20mA potencia turbina Rhom\",\n    voltaje_potencia: msg.payload.A0.voltage,\n    nivel_limnimetrico: 0,\n    caudal: 0,\n    sensor_status: null\n};\n\nlet AI1 = {\n    info: \"Señal 4-20mA potencia turbina Pehui\",\n    voltaje_potencia: msg.payload.A1.voltage,\n    nivel_limnimetrico: 0,\n    caudal: 0,\n    sensor_status: null\n};\n\n// Si la corriente es menor a 4mA o voltaje\n// leido en tarjeta es menor a 0.6V hay un problema\n// con la señal, cable, terminales o tarjeta conversora\n\n// Medicion AI0 con error\nif (AI0.voltaje_potencia < 0.5) {\n    AI0.sensor_status = \"Error\";\n    //msg.payload = \"Señal en AI0 no detectada, posible problema con sensor, conexion o tarjeta interfaz.\";\n}\n// Medicion AI0 ok\nelse{\n    AI0.sensor_status = \"Ok\";\n\n    // Calcular caudal Rhom.\n    AI0.caudal = AI0.voltaje_potencia*250;\n}\n\n// Medicion AI1 con error\nif (AI1.voltaje_potencia < 0.5) {\n    AI1.sensor_status = \"Error\";\n    //msg.payload = \"Señal en AI0 no detectada, posible problema con sensor, conexion o tarjeta interfaz.\";\n}\n// Medicion AI1 ok\nelse{\n    AI1.sensor_status = \"Ok\";\n\n    // Calcular caudal Rhom.\n    AI1.caudal = AI1.voltaje_potencia*250;\n}\n\nlet payload = {};\npayload[\"AI0\"] = AI0;\npayload[\"AI1\"] = AI1;\n\nmsg.payload = payload;\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 140,
        "y": 380,
        "wires": [
            [
                "893673ea93e0e06f",
                "4946d3f5dd275c08",
                "a7b53b36ed38903a"
            ]
        ]
    },
    {
        "id": "4946d3f5dd275c08",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Check AI0 status",
        "property": "payload.AI0.sensor_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Error",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 380,
        "wires": [
            [
                "7ed6f2b351432dc7",
                "31e89ae3f4fed3a6"
            ],
            [
                "0b8999ac3911ae51"
            ]
        ]
    },
    {
        "id": "32667a9d7b3dc322",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "Insertar log",
        "query": "INSERT INTO logs_eventos (fecha_hora,\n    id_obra,\n    tipo_log,\n    evento)\n    VALUES (NOW(), \n    1,\n    'Info',\n    'Sensor AI0 ok.');",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 770,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "56a4395ebf5939cd",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "Insertar registro Pehui",
        "query": "INSERT INTO registros (fecha_hora,\n    id_obra,\n    nivel_limnimetrico,\n    caudal)\n    VALUES (NOW(), \n    2,\n    {{{ msg.payload.AI1.nivel_limnimetrico }}},\n    {{{ msg.payload.AI1.caudal }}});",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "a7b53b36ed38903a",
        "type": "switch",
        "z": "f6f2187d.f17ca8",
        "name": "Check AI1 status",
        "property": "payload.AI1.sensor_status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Ok",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Error",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 350,
        "y": 500,
        "wires": [
            [
                "a7765e2ca73f955e",
                "56a4395ebf5939cd"
            ],
            [
                "931c321a8d139939"
            ]
        ]
    },
    {
        "id": "7ed6f2b351432dc7",
        "type": "rbe",
        "z": "f6f2187d.f17ca8",
        "name": "Status filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.AI0.sensor_status",
        "topi": "topic",
        "x": 590,
        "y": 360,
        "wires": [
            [
                "32667a9d7b3dc322"
            ]
        ]
    },
    {
        "id": "a7765e2ca73f955e",
        "type": "rbe",
        "z": "f6f2187d.f17ca8",
        "name": "Status filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.AI1.sensor_status",
        "topi": "topic",
        "x": 590,
        "y": 540,
        "wires": [
            [
                "e177fe3b512d5553"
            ]
        ]
    },
    {
        "id": "31e89ae3f4fed3a6",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "Insertar registro Rhom",
        "query": "INSERT INTO registros (fecha_hora,\n    id_obra,\n    nivel_limnimetrico,\n    caudal)\n    VALUES (NOW(), \n    2,\n    {{{ msg.payload.AI0.nivel_limnimetrico }}},\n    {{{ msg.payload.AI0.caudal }}});",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 620,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "e177fe3b512d5553",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "Insertar log",
        "query": "INSERT INTO logs_eventos (fecha_hora,\n    id_obra,\n    tipo_log,\n    evento)\n    VALUES (NOW(), \n    2,\n    'Info',\n    'Sensor AI1 ok.');",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 770,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "479d785e58b2924b",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "Insertar log",
        "query": "INSERT INTO logs_eventos (fecha_hora,\n    id_obra,\n    tipo_log,\n    evento)\n    VALUES (NOW(), \n    1,\n    'Error',\n    'Sensor AI0 error.');",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 770,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "0b8999ac3911ae51",
        "type": "rbe",
        "z": "f6f2187d.f17ca8",
        "name": "Status filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.AI0.sensor_status",
        "topi": "topic",
        "x": 590,
        "y": 420,
        "wires": [
            [
                "479d785e58b2924b"
            ]
        ]
    },
    {
        "id": "931c321a8d139939",
        "type": "rbe",
        "z": "f6f2187d.f17ca8",
        "name": "Status filter",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload.AI1.sensor_status",
        "topi": "topic",
        "x": 590,
        "y": 600,
        "wires": [
            [
                "dc0248c2ccd031c0"
            ]
        ]
    },
    {
        "id": "dc0248c2ccd031c0",
        "type": "postgresql",
        "z": "f6f2187d.f17ca8",
        "name": "Insertar log",
        "query": "INSERT INTO logs_eventos (fecha_hora,\n    id_obra,\n    tipo_log,\n    evento)\n    VALUES (NOW(), \n    2,\n    'Error',\n    'Sensor AI1 error.');",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 770,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "b234123a.c95f5",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 40,
        "wires": []
    },
    {
        "id": "09c5185b84028af8",
        "type": "inject",
        "z": "c19fc8a18bff1dd0",
        "name": "Email test",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "Test subject",
        "payload": "This is a test",
        "payloadType": "str",
        "x": 100,
        "y": 100,
        "wires": [
            [
                "ab24375cb61c90bf"
            ]
        ]
    },
    {
        "id": "ab24375cb61c90bf",
        "type": "e-mail",
        "z": "c19fc8a18bff1dd0",
        "server": "smtp.gmail.com",
        "port": "465",
        "authtype": "BASIC",
        "saslformat": true,
        "token": "oauth2Response.access_token",
        "secure": true,
        "tls": true,
        "name": "philippe.ilharreguy@gmail.com",
        "dname": "PI email",
        "x": 260,
        "y": 100,
        "wires": []
    },
    {
        "id": "9ae215cb4e377e36",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "debug 4",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 540,
        "y": 160,
        "wires": []
    },
    {
        "id": "68926513297359aa",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "GetSOAP",
        "func": "\nlet newmsg = {\n    server: \"https://snia.mop.gob.cl/controlextraccion/wsdl/datosExtraccion/SendDataExtraccionService\",\n    options: {\n        overrideRootElement: {\n            \"namespace\": \"get\",\n            \"xmlnsAttributes\": [{\n                \"name\": \"xmlns:get\",\n                \"value\": \"http://www.mop.cl/controlextraccion/xsd/datosExtraccion/GetDataExtraccionRequest\"\n            }]\n        }\n    },\n    headers: {},\n    payload: {\n            codigoDeLaObra: \"OB-1402-497\",\n            numeroComprobante: \"9258b8f7140de6ef6f0b7d710158ce8b\"\n    }\n};\n\nreturn newmsg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 240,
        "y": 160,
        "wires": [
            [
                "dd90b7fa6e9340fa"
            ]
        ]
    },
    {
        "id": "67ab826ef7fe7aae",
        "type": "inject",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 160,
        "wires": [
            [
                "68926513297359aa"
            ]
        ]
    },
    {
        "id": "dd90b7fa6e9340fa",
        "type": "soap request plus",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "topic": "",
        "wsdl": "22d655552657cf36",
        "method": "getDataExtraccionOp",
        "x": 370,
        "y": 160,
        "wires": [
            [
                "9ae215cb4e377e36"
            ],
            [
                "9ae215cb4e377e36"
            ]
        ]
    },
    {
        "id": "fcb51e4af2e157b9",
        "type": "node-red-contrib-whatsapp-cmb-send-message",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "credtype": "account",
        "account": "80b99021.9a4",
        "text": "alert_message",
        "phonenumbervalue": "",
        "apikeyvalue": "",
        "apikeyinputtypemessage": "msg",
        "phonenumberinputtypemessage": "msg",
        "inputtypemessage": "msg",
        "rejectssl": true,
        "x": 220,
        "y": 40,
        "wires": [
            [
                "b234123a.c95f5"
            ]
        ]
    },
    {
        "id": "6b9dcce09517d5be",
        "type": "comment",
        "z": "c19fc8a18bff1dd0",
        "name": "Descripcion logica",
        "info": "Cada x minutos enviar registro mas antiguo no enviado\n\nQuedan registros por mandar?\nSi: intenta enviar\nNo: no se intenta enviar\n",
        "x": 110,
        "y": 220,
        "wires": []
    },
    {
        "id": "1586e2347ef23312",
        "type": "inject",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 280,
        "wires": [
            [
                "ad01ed3eca76398e"
            ]
        ]
    },
    {
        "id": "ad01ed3eca76398e",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Query Registros Hora",
        "query": "SELECT * FROM registros_hora\nWHERE bucket < date_trunc('hour', now())\nAND id_obra = 1\nAND estado_dga <> 'Enviado ok'\nORDER BY bucket ASC;",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 280,
        "wires": [
            [
                "d166a3e61c85fd73"
            ]
        ]
    },
    {
        "id": "356fa6003b59a4df",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "debug 2",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 400,
        "wires": []
    },
    {
        "id": "d166a3e61c85fd73",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "PutSOAP",
        "func": "// Se revisa que hayan datos no enviados o con error de envio en Timescale.\nif(msg.payload[0] === undefined){\n   msg.payload = 'No data to send';\n   return msg;\n}\n\n// Obtener codigo de DGA\nlet dga_codigo = env.get('DGA_CODIGO_RHOM')\n\n// Se generan formatos de fechas. Servidor esta con timezone.\nconst timestamp = new Date(msg.payload[0].bucket);\nconst timestamp_no_ms = timestamp.toISOString().split('.')[0] + 'Z';\nconst options = { timeZone: 'America/Santiago' };\nconst timestamp_local = new Date(timestamp.toLocaleString('en-US', options));\n\nconst date_local = timestamp_local.toLocaleDateString('en-GB', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n}).split('/').join('-');\n\nconst time = timestamp_local.toISOString().split('T')[1].split('.')[0];\n\nconst caudal_L_s = (msg.payload[0].avg_caudal*1000).toFixed(2);\nconst profundidad_mm = (msg.payload[0].avg_nivel_aforador*1000).toFixed(0);\n\n// Guardar id de query para actualizar despues.\nmsg.id_composite = {\n   timestamp_no_ms: timestamp_no_ms,\n   id_obra: msg.payload[0].id_obra\n};\n\n/*\nmsg.payload = {bucket: msg.payload[0].bucket,\n   timestamp: timestamp, timestamp_no_ms: timestamp_no_ms,\n   date_local: date_local, time: time, caudal: caudal_L_s};\nreturn msg;\n*/\n\nmsg.headers = {\n    'Content-Type': 'text/xml;charset=UTF-8',\n    'SOAPAction': 'http://www.mop.cl/controlextraccion/wsdl/datosExtraccion/authSendDataExtraccionOp',\n    'Host': 'snia.mop.gob.cl'\n};\n\nmsg.payload = \n`<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:aut=\"http://www.mop.cl/controlextraccion/xsd/datosExtraccion/AuthSendDataExtraccionRequest\">\n   <soapenv:Header>\n      <aut:authSendDataExtraccionTraza>\n         <aut:codigoDeLaObra>${dga_codigo}</aut:codigoDeLaObra>\n         <aut:timeStampOrigen>${timestamp_no_ms}</aut:timeStampOrigen>\n      </aut:authSendDataExtraccionTraza>\n   </soapenv:Header>\n   <soapenv:Body>\n      <aut:authSendDataExtraccionRequest>\n         <aut:authDataUsuario>\n            <aut:idUsuario>\n               <aut:rut>16338539-2</aut:rut>\n            </aut:idUsuario>\n            <aut:password>MkMKg69nO2</aut:password>\n         </aut:authDataUsuario>\n         <aut:authDataExtraccionSuperficial>\n            <aut:fechaMedicion>${date_local}</aut:fechaMedicion>\n            <aut:horaMedicion>${time}</aut:horaMedicion>\n            <aut:caudal>${caudal_L_s}</aut:caudal>\n            <aut:alturaLimnimetrica>${profundidad_mm}</aut:alturaLimnimetrica>\n         </aut:authDataExtraccionSuperficial>\n      </aut:authSendDataExtraccionRequest>\n   </soapenv:Body>\n</soapenv:Envelope>`;\n\nmsg.soap_request = msg.payload;\n\ndelete msg.pgsql;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 80,
        "y": 340,
        "wires": [
            [
                "7fd3ab3ed7b58461"
            ]
        ]
    },
    {
        "id": "d8df1f317d9e5ea8",
        "type": "http request",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://snia.mop.gob.cl/controlextraccion/datosExtraccion/SendDataExtraccionService",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 340,
        "wires": [
            [
                "92d200e06ac25b0f"
            ]
        ]
    },
    {
        "id": "92d200e06ac25b0f",
        "type": "xml",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 490,
        "y": 340,
        "wires": [
            [
                "9b32cbcc762bfc04"
            ]
        ]
    },
    {
        "id": "9b32cbcc762bfc04",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "ExtractResponse",
        "func": "let httpStatusCode = msg.statusCode;\nlet soap_data;\nlet status;\nlet new_payload = {};\nlet error_counter = context.get('error_counter') || 0;\n\nmsg.xml = msg.payload;\n\n// Intenta acceder a informacion. Si no puede, servidor de DGA\n// genero error intentando.\ntry {\n    soap_data = msg.payload[\"soapenv:Envelope\"][\"soapenv:Body\"][0][\"authSendDataExtraccionResponse\"][0];\n    new_payload[\"httpStatusCode\"] = httpStatusCode;\n    new_payload[\"comprobante_dga\"] = soap_data[\"numeroComprobante\"][0];\n\n    status = soap_data[\"status\"][0];\n    new_payload[\"codigo_dga\"] = status[\"Code\"][0];\n    new_payload[\"descripcion\"] = status[\"Description\"][0];\n\n    if (new_payload[\"codigo_dga\"] == 0){\n        new_payload[\"estado_dga\"] = 'Enviado ok';\n        context.set('error_counter', 0);\n    }\n    else throw \"Codigo DGA distinto de cero\";\n}\ncatch (error) {    \n    context.set('error_counter', error_counter + 1);\n    \n    // Acumula varios errores antes de definir estado de error.\n    if (error_counter >= 5){\n        new_payload[\"estado_dga\"] = 'Error en enviado';\n    }\n\n    new_payload[\"comprobante_dga\"] = 0;\n}\n\nmsg.payload = new_payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 400,
        "wires": [
            [
                "356fa6003b59a4df",
                "13665b127de89330"
            ]
        ]
    },
    {
        "id": "7fd3ab3ed7b58461",
        "type": "switch",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "No data to send",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 340,
        "wires": [
            [
                "d8df1f317d9e5ea8"
            ]
        ]
    },
    {
        "id": "635fa7ee3059fb8c",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Update Registro",
        "query": "UPDATE registros_hora\n    SET estado_dga = '{{{ msg.payload.estado_dga }}}',\n        comprobante_dga = '{{{ msg.payload.comprobante_dga }}}',\n        fecha_actualizacion = NOW()\n    WHERE bucket = '{{{ msg.id_composite.timestamp_no_ms }}}'\n    AND id_obra = {{{ msg.id_composite.id_obra }}};",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 560,
        "wires": [
            [
                "234f2217f7419470"
            ]
        ]
    },
    {
        "id": "234f2217f7419470",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Query Registros Pendientes",
        "query": "select count(*) AS registros_pendientes\nfrom registros_hora\nwhere \"estado_dga\" <> 'Enviado ok';",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 560,
        "wires": [
            [
                "2cd964c87b09a7be"
            ]
        ]
    },
    {
        "id": "2cd964c87b09a7be",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "Registros pendientes",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload[0]",
        "statusType": "msg",
        "x": 720,
        "y": 620,
        "wires": []
    },
    {
        "id": "120c1fefba4f8be0",
        "type": "comment",
        "z": "c19fc8a18bff1dd0",
        "name": "Error",
        "info": "",
        "x": 690,
        "y": 440,
        "wires": []
    },
    {
        "id": "bf9a568f9ee01888",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Insertar log error",
        "query": "INSERT INTO logs_eventos (fecha_hora,\n    id_obra,\n    tipo_log,\n    evento)\n    VALUES (NOW(), \n    {{{ msg.id_composite.id_obra }}},\n    'Error',\n    'Problema al enviar datos a la DGA.');",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "1e5180b8a60ac9d0",
        "type": "rbe",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload[\"estado_dga\"]",
        "topi": "topic",
        "x": 350,
        "y": 440,
        "wires": [
            [
                "bf9a568f9ee01888",
                "635fa7ee3059fb8c"
            ]
        ]
    },
    {
        "id": "13665b127de89330",
        "type": "switch",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "property": "payload[\"estado_dga\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Error en enviado",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Enviado ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 460,
        "wires": [
            [
                "1e5180b8a60ac9d0"
            ],
            [
                "d5e2fe3b1185a55e",
                "635fa7ee3059fb8c"
            ]
        ]
    },
    {
        "id": "d516e0c90551f04a",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Insertar log info",
        "query": "INSERT INTO logs_eventos (fecha_hora,\n    id_obra,\n    tipo_log,\n    evento)\n    VALUES (NOW(), \n    {{{ msg.id_composite.id_obra }}},\n    'Info',\n    'Enviando datos a la DGA.');",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "2b8d50855463e1e6",
        "type": "comment",
        "z": "c19fc8a18bff1dd0",
        "name": "Ok",
        "info": "",
        "x": 690,
        "y": 500,
        "wires": []
    },
    {
        "id": "d5e2fe3b1185a55e",
        "type": "rbe",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload[\"estado_dga\"]",
        "topi": "topic",
        "x": 350,
        "y": 480,
        "wires": [
            [
                "d516e0c90551f04a"
            ]
        ]
    },
    {
        "id": "55bde7de14427a05",
        "type": "inject",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 100,
        "y": 680,
        "wires": [
            [
                "398998db87436301"
            ]
        ]
    },
    {
        "id": "398998db87436301",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Query Registros Hora",
        "query": "SELECT * FROM registros_hora\nWHERE bucket < date_trunc('hour', now())\nAND id_obra = 2\nAND estado_dga <> 'Enviado ok'\nORDER BY bucket ASC;",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 300,
        "y": 680,
        "wires": [
            [
                "f8bc2af073ac5d75"
            ]
        ]
    },
    {
        "id": "8e966c356adfb669",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "debug 3",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 360,
        "y": 800,
        "wires": []
    },
    {
        "id": "f8bc2af073ac5d75",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "PutSOAP",
        "func": "// Se revisa que hayan datos no enviados o con error de envio en Timescale.\nif(msg.payload[0] === undefined){\n   msg.payload = 'No data to send';\n   return msg;\n}\n\n// Obtener codigo de DGA\nlet dga_codigo = env.get('DGA_CODIGO_PEHUI')\n\n// Se generan formatos de fechas. Servidor esta con timezone.\nconst timestamp = new Date(msg.payload[0].bucket);\nconst timestamp_no_ms = timestamp.toISOString().split('.')[0] + 'Z';\nconst options = { timeZone: 'America/Santiago' };\nconst timestamp_local = new Date(timestamp.toLocaleString('en-US', options));\n\nconst date_local = timestamp_local.toLocaleDateString('en-GB', {\n    day: '2-digit',\n    month: '2-digit',\n    year: 'numeric'\n}).split('/').join('-');\n\nconst time = timestamp_local.toISOString().split('T')[1].split('.')[0];\n\nconst caudal_L_s = (msg.payload[0].avg_caudal*1000).toFixed(2);\nconst profundidad_mm = (msg.payload[0].avg_nivel_aforador*1000).toFixed(0);\n\n// Guardar id de query para actualizar despues.\nmsg.id_composite = {\n   timestamp_no_ms: timestamp_no_ms,\n   id_obra: msg.payload[0].id_obra\n};\n\n/*\nmsg.payload = {bucket: msg.payload[0].bucket,\n   timestamp: timestamp, timestamp_no_ms: timestamp_no_ms,\n   date_local: date_local, time: time, caudal: caudal_L_s};\nreturn msg;\n*/\n\nmsg.headers = {\n    'Content-Type': 'text/xml;charset=UTF-8',\n    'SOAPAction': 'http://www.mop.cl/controlextraccion/wsdl/datosExtraccion/authSendDataExtraccionOp',\n    'Host': 'snia.mop.gob.cl'\n};\n\nmsg.payload = \n`<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:aut=\"http://www.mop.cl/controlextraccion/xsd/datosExtraccion/AuthSendDataExtraccionRequest\">\n   <soapenv:Header>\n      <aut:authSendDataExtraccionTraza>\n         <aut:codigoDeLaObra>${dga_codigo}</aut:codigoDeLaObra>\n         <aut:timeStampOrigen>${timestamp_no_ms}</aut:timeStampOrigen>\n      </aut:authSendDataExtraccionTraza>\n   </soapenv:Header>\n   <soapenv:Body>\n      <aut:authSendDataExtraccionRequest>\n         <aut:authDataUsuario>\n            <aut:idUsuario>\n               <aut:rut>16338539-2</aut:rut>\n            </aut:idUsuario>\n            <aut:password>MkMKg69nO2</aut:password>\n         </aut:authDataUsuario>\n         <aut:authDataExtraccionSuperficial>\n            <aut:fechaMedicion>${date_local}</aut:fechaMedicion>\n            <aut:horaMedicion>${time}</aut:horaMedicion>\n            <aut:caudal>${caudal_L_s}</aut:caudal>\n            <aut:alturaLimnimetrica>${profundidad_mm}</aut:alturaLimnimetrica>\n         </aut:authDataExtraccionSuperficial>\n      </aut:authSendDataExtraccionRequest>\n   </soapenv:Body>\n</soapenv:Envelope>`;\n\nmsg.soap_request = msg.payload;\n\ndelete msg.pgsql;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 80,
        "y": 740,
        "wires": [
            [
                "63403dda0e28d170"
            ]
        ]
    },
    {
        "id": "dc292778a855f48b",
        "type": "http request",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://snia.mop.gob.cl/controlextraccion/datosExtraccion/SendDataExtraccionService",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 350,
        "y": 740,
        "wires": [
            [
                "a56dcdfc9566aab5"
            ]
        ]
    },
    {
        "id": "a56dcdfc9566aab5",
        "type": "xml",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "property": "payload",
        "attr": "",
        "chr": "",
        "x": 490,
        "y": 740,
        "wires": [
            [
                "943985c7bcfe0be4"
            ]
        ]
    },
    {
        "id": "943985c7bcfe0be4",
        "type": "function",
        "z": "c19fc8a18bff1dd0",
        "name": "ExtractResponse",
        "func": "let httpStatusCode = msg.statusCode;\nlet soap_data;\nlet status;\nlet new_payload = {};\nlet error_counter = context.get('error_counter') || 0;\n\nmsg.xml = msg.payload;\n\n// Intenta acceder a informacion. Si no puede, servidor de DGA\n// genero error intentando.\ntry {\n    soap_data = msg.payload[\"soapenv:Envelope\"][\"soapenv:Body\"][0][\"authSendDataExtraccionResponse\"][0];\n    new_payload[\"httpStatusCode\"] = httpStatusCode;\n    new_payload[\"comprobante_dga\"] = soap_data[\"numeroComprobante\"][0];\n\n    status = soap_data[\"status\"][0];\n    new_payload[\"codigo_dga\"] = status[\"Code\"][0];\n    new_payload[\"descripcion\"] = status[\"Description\"][0];\n\n    if (new_payload[\"codigo_dga\"] == 0){\n        new_payload[\"estado_dga\"] = 'Enviado ok';\n        context.set('error_counter', 0);\n    }\n    else throw \"Codigo DGA distinto de cero\";\n}\ncatch (error) {    \n    context.set('error_counter', error_counter + 1);\n    \n    // Acumula varios errores antes de definir estado de error.\n    if (error_counter >= 5){\n        new_payload[\"estado_dga\"] = 'Error en enviado';\n    }\n\n    new_payload[\"comprobante_dga\"] = 0;\n}\n\nmsg.payload = new_payload;\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 110,
        "y": 800,
        "wires": [
            [
                "8e966c356adfb669",
                "fa74ad60d0f0b375"
            ]
        ]
    },
    {
        "id": "63403dda0e28d170",
        "type": "switch",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "No data to send",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 210,
        "y": 740,
        "wires": [
            [
                "dc292778a855f48b"
            ]
        ]
    },
    {
        "id": "944b32bd8dbe2b7f",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Update Registro",
        "query": "UPDATE registros_hora\n    SET estado_dga = '{{{ msg.payload.estado_dga }}}',\n        comprobante_dga = '{{{ msg.payload.comprobante_dga }}}',\n        fecha_actualizacion = NOW()\n    WHERE bucket = '{{{ msg.id_composite.timestamp_no_ms }}}'\n    AND id_obra = {{{ msg.id_composite.id_obra }}};",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 960,
        "wires": [
            [
                "2564a378fdba5f6a"
            ]
        ]
    },
    {
        "id": "2564a378fdba5f6a",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Query Registros Pendientes",
        "query": "select count(*) AS registros_pendientes\nfrom registros_hora\nwhere \"estado_dga\" <> 'Enviado ok';",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 740,
        "y": 960,
        "wires": [
            [
                "df6af12664e1cd86"
            ]
        ]
    },
    {
        "id": "df6af12664e1cd86",
        "type": "debug",
        "z": "c19fc8a18bff1dd0",
        "name": "Registros pendientes",
        "active": true,
        "tosidebar": false,
        "console": false,
        "tostatus": true,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "payload[0]",
        "statusType": "msg",
        "x": 720,
        "y": 1020,
        "wires": []
    },
    {
        "id": "b0fea990885c1b68",
        "type": "comment",
        "z": "c19fc8a18bff1dd0",
        "name": "Error",
        "info": "",
        "x": 690,
        "y": 840,
        "wires": []
    },
    {
        "id": "17bcb642acd02819",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Insertar log error",
        "query": "INSERT INTO logs_eventos (fecha_hora,\n    id_obra,\n    tipo_log,\n    evento)\n    VALUES (NOW(), \n    {{{ msg.id_composite.id_obra }}},\n    'Error',\n    'Problema al enviar datos de Pehui a la DGA.');",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "5058e0baeafe2820",
        "type": "rbe",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload[\"estado_dga\"]",
        "topi": "topic",
        "x": 350,
        "y": 840,
        "wires": [
            [
                "17bcb642acd02819",
                "944b32bd8dbe2b7f"
            ]
        ]
    },
    {
        "id": "fa74ad60d0f0b375",
        "type": "switch",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "property": "payload[\"estado_dga\"]",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "Error en enviado",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "Enviado ok",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 860,
        "wires": [
            [
                "5058e0baeafe2820"
            ],
            [
                "43a92626dff400ac",
                "944b32bd8dbe2b7f"
            ]
        ]
    },
    {
        "id": "2c960ec55b95010b",
        "type": "postgresql",
        "z": "c19fc8a18bff1dd0",
        "name": "Insertar log info",
        "query": "INSERT INTO logs_eventos (fecha_hora,\n    id_obra,\n    tipo_log,\n    evento)\n    VALUES (NOW(), \n    {{{ msg.id_composite.id_obra }}},\n    'Info',\n    'Enviando datos de Pehui a la DGA.');",
        "postgreSQLConfig": "b23d8359c5c9ebfb",
        "split": false,
        "rowsPerMsg": 1,
        "outputs": 1,
        "x": 520,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "ade9ccf62212e499",
        "type": "comment",
        "z": "c19fc8a18bff1dd0",
        "name": "Ok",
        "info": "",
        "x": 690,
        "y": 900,
        "wires": []
    },
    {
        "id": "43a92626dff400ac",
        "type": "rbe",
        "z": "c19fc8a18bff1dd0",
        "name": "",
        "func": "rbe",
        "gap": "",
        "start": "",
        "inout": "out",
        "septopics": true,
        "property": "payload[\"estado_dga\"]",
        "topi": "topic",
        "x": 350,
        "y": 880,
        "wires": [
            [
                "2c960ec55b95010b"
            ]
        ]
    }
]